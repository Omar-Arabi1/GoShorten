// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const addUrl = `-- name: AddUrl :exec
INSERT INTO urls (id, long_url, shortened_url_key) VALUES (?, ?, ?)
`

type AddUrlParams struct {
	ID              string
	LongUrl         sql.NullString
	ShortenedUrlKey sql.NullString
}

func (q *Queries) AddUrl(ctx context.Context, arg AddUrlParams) error {
	_, err := q.db.ExecContext(ctx, addUrl, arg.ID, arg.LongUrl, arg.ShortenedUrlKey)
	return err
}

const deleteUrl = `-- name: DeleteUrl :exec
DELETE FROM urls WHERE id = ?
`

func (q *Queries) DeleteUrl(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUrl, id)
	return err
}

const getUrls = `-- name: GetUrls :many
SELECT id, long_url, shortened_url_key FROM urls
`

func (q *Queries) GetUrls(ctx context.Context) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, getUrls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(&i.ID, &i.LongUrl, &i.ShortenedUrlKey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryUrlByShortUrl = `-- name: QueryUrlByShortUrl :one
SELECT id, long_url, shortened_url_key FROM urls WHERE shortened_url_key = ?
`

func (q *Queries) QueryUrlByShortUrl(ctx context.Context, shortenedUrlKey sql.NullString) (Url, error) {
	row := q.db.QueryRowContext(ctx, queryUrlByShortUrl, shortenedUrlKey)
	var i Url
	err := row.Scan(&i.ID, &i.LongUrl, &i.ShortenedUrlKey)
	return i, err
}

const updateUrl = `-- name: UpdateUrl :exec
UPDATE urls SET long_url = ? WHERE id = ?
`

type UpdateUrlParams struct {
	LongUrl sql.NullString
	ID      string
}

func (q *Queries) UpdateUrl(ctx context.Context, arg UpdateUrlParams) error {
	_, err := q.db.ExecContext(ctx, updateUrl, arg.LongUrl, arg.ID)
	return err
}
